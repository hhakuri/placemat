{{$spineIdx := .SpineIdx -}}
{{$self := index .Args.Spines $spineIdx -}}
log stderr all;
protocol device {
    scan time 60;
}
protocol bfd {
    interface "*" {
       min rx interval 400 ms;
       min tx interval 400 ms;
    };
}
protocol static defaultgw {
    ipv4;
    route 0.0.0.0/0 via 10.0.2.0;
}
protocol kernel {
    merge paths;
    ipv4 {
        export all;
    };
}
template bgp bgptor {
    local as {{.Args.Network.ASNSpine}};
    bfd;

    ipv4 {
        import all;
        export all;
        next hop self;
    };
}
{{range $rack := .Args.Racks -}}
protocol bgp '{{$rack.Name}}-tor1' from bgptor {
    neighbor {{(index $rack.ToR1.SpineAddresses $spineIdx).IP}} as {{$rack.ASN}};
}
protocol bgp '{{$rack.Name}}-tor2' from bgptor {
    neighbor {{(index $rack.ToR2.SpineAddresses $spineIdx).IP}} as {{$rack.ASN}};
}
{{end -}}
ipv4 table outertab;
protocol static myroutes {
    ipv4 {
        table outertab;
    };
    # LoadBalancer
    route {{.Args.Network.Exposed.LoadBalancer}} via {{$self.CoreRouterAddress.IP}};
    # Bastion
    route {{.Args.Network.Exposed.Bastion}} via {{$self.CoreRouterAddress.IP}};
    # Ingress
    route {{.Args.Network.Exposed.Ingress}} via {{$self.CoreRouterAddress.IP}};
}
protocol bgp bgpextvm {
    local as {{.Args.Network.ASNSpine}};
    neighbor {{(index .Args.CoreRouter.SpineAddresses $spineIdx).IP}} as {{.Args.Network.ASNCoreRouter}};
    bfd;

    ipv4 {
        table outertab;
        import all;
        export all;
        next hop self;
    };
}
protocol pipe outerroutes {
    table master4;
    peer table outertab;
    import filter {
        if proto = "myroutes" then reject;
        accept;
    };
    export none;
}
protocol bgp 'core' {
    local as {{.Args.Network.ASNSpine}};
    neighbor 10.0.2.0 as 64597;
    bfd;

    ipv4 {
        import all;
        export all;
    };
}
